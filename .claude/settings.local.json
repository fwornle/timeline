{
  "permissions": {
    "allow": [
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(curl:*)",
      "Bash(npm run lint)",
      "Bash(rm:*)",
      "Bash(rg:*)",
      "Bash(npm run typecheck:*)",
      "Bash(plantuml:*)",
      "Bash(npm uninstall:*)",
      "Bash(git clone:*)",
      "Bash(grep:*)",
      "Bash(lsof:*)",
      "Bash(find:*)",
      "Bash(kill:*)",
      "Bash(ls:*)",
      "Bash(claude mcp:*)",
      "mcp__memory__read_graph",
      "Bash(mkdir:*)",
      "Bash(chmod:*)",
      "mcp__memory__create_entities",
      "mcp__memory__create_relations",
      "Bash(~/install-git-hooks.sh)",
      "Bash(~/summarize-coding-session.sh:*)",
      "Bash(~/capture-coding-insight.sh --problem \"Parsing AI conversation history with prompt/response pairs and extracting metrics\" --solution \"Created a structured parser that: 1) Identifies prompts by '_**User**_' markers, 2) Extracts response sections by '_**Assistant**_' markers, 3) Maintains index tracking for correlation with git commits, 4) Parses tool invocation stats and file changes from response content. Key pattern: Use clear delimiters and maintain positional indices for later timestamp correlation.\" --category \"parsing\" --tags \"ai-conversation,typescript,parser,timeline\" --project \"timeline\")",
      "Bash(~/capture-coding-insight.sh --problem \"Implementing calendar awareness with public holidays and bridge days in a timeline visualization\" --solution \"Created a calendar service with: 1) Separate types for holidays vs bridge days, 2) Timezone-aware API endpoint for fetching calendar data, 3) Graceful fallback to empty calendar on API failure, 4) Utility functions for weekend/holiday/bridge day detection using ISO date string comparison. Pattern: Always provide fallback data for non-critical features to prevent UI breakage.\" --category \"service-design\" --tags \"calendar,holidays,typescript,timeline,api\" --project \"timeline\")",
      "Bash(~/capture-coding-insight.sh --problem \"Building an interactive metrics visualization with hover states and auto-expand behavior\" --solution \"Implemented a horizontal metrics plot with: 1) Mouse position tracking for auto-expand when hovering near top, 2) Smooth transitions using cubic-bezier easing, 3) Dynamic height changes between compact/expanded states, 4) Synchronized calendar data fetching for weekend/holiday markers, 5) SVG-based chart with responsive grid system. Key pattern: Use ref-based mouse tracking for smooth UI interactions without React re-renders.\" --category \"visualization\" --tags \"metrics,svg,react,animation,timeline\" --project \"timeline\")",
      "Bash(~/capture-coding-insight.sh --problem \"Making debug visualization conditional based on log level in a Three.js React component\" --solution \"Implemented conditional debug rendering by: 1) Checking Logger active levels on each render using an IIFE pattern, 2) Only showing debug planes when DEBUG or TRACE levels are active, 3) Using Logger.getActiveLevels() to dynamically check current logging state. Pattern: For debug visualizations in 3D scenes, make them conditional on runtime log levels rather than build-time flags to aid production debugging.\" --category \"debugging\" --tags \"three.js,react,logging,debug,timeline\" --project \"timeline\")",
      "Bash(~/capture-coding-insight.sh --problem \"Managing global interaction state for Three.js React components in a timeline\" --solution \"Created a global card interaction system with: 1) Singleton pattern for tracking hovered/open/animating cards, 2) Global click handlers to close cards when clicking outside, 3) Callbacks registry pattern for component communication, 4) Document-level event listeners that are added/removed based on active components. Pattern: Use module-level singleton state for Three.js interactions that need to coordinate across multiple React components.\" --category \"architecture\" --tags \"three.js,react,state-management,timeline,singleton\" --project \"timeline\")",
      "Bash(~/capture-coding-insight.sh --problem \"Persisting camera and UI state in a Three.js timeline application\" --solution \"Implemented preference storage with: 1) Structured state types for camera position/target/zoom, 2) Simple obfuscation using btoa/atob with URL encoding for safety, 3) Graceful error handling with empty object fallbacks, 4) Separate storage for camera state vs marker position to allow independent updates. Pattern: Store 3D camera state as plain objects (not Three.js objects) and use simple obfuscation for user preferences to prevent casual tampering.\" --category \"persistence\" --tags \"three.js,localstorage,state-persistence,timeline,preferences\" --project \"timeline\")",
      "Bash(~/capture-coding-insight.sh --list)",
      "Bash(~/capture-coding-insight.sh --import)",
      "Bash(~/test-mcp-availability.sh)",
      "Bash(~/capture-coding-insight.sh --problem \"Test MCP detection\" --solution \"Testing if the script properly detects MCP availability\" --category \"testing\" --tags \"mcp,bash\" --project \"capture-script\")",
      "Bash(~/capture-insight-mcp.sh --create \"Test problem\" \"Test solution\" \"test-project\" \"testing\" \"mcp,wrapper\" \"bash\")",
      "Bash(~/query-coding-knowledge.sh \"calendar\")",
      "mcp__memory__search_nodes",
      "mcp__memory__add_observations",
      "mcp__memory__open_nodes",
      "Bash(~/vkb)",
      "Bash(sudo ln:*)",
      "Bash(ln:*)",
      "Bash(vkb)",
      "Bash(mv:*)",
      "Bash(git init:*)",
      "Bash(git -C ~/Claude add .)",
      "Bash(git -C ~/Claude commit -m \"Initial commit: Knowledge management scripts organized in topic directory\")",
      "Bash(tree:*)",
      "Bash(~/Claude/knowledge-management/vkb)",
      "Bash(~/Claude/quick-commit.sh \"Add git helper scripts for easier repository management\")",
      "Bash(npx tsc:*)",
      "Bash(sed:*)",
      "Bash(bash:*)",
      "Bash(/Users/q284340/Claude/knowledge-management/summarize-coding-session.sh:*)",
      "Bash(git commit:*)",
      "Bash(git rebase:*)",
      "Bash(git reset:*)",
      "Bash(git add:*)",
      "Bash(./rewrite-commits.sh:*)",
      "Bash(claude --version)",
      "Bash(jq:*)",
      "Bash(npx eslint:*)",
      "Bash(pkill:*)",
      "Bash(ukb)",
      "mcp__claude-logger__enable_auto_logging",
      "mcp__claude-logger__log_message",
      "Bash(/Users/q284340/Agentic/coding/knowledge-management/ukb --add \"CrossProjectLoggingPattern\" \"TransferablePattern\" \"MCP logging server automatically detects and logs coding project work from other project contexts. Implements dual logging (current project + coding project), smart keyword detection, consistent filename convention (YYYY-MM-DD_HH-MM-lowercase-no-spaces), and automatic filename normalization. Key files: claude-logger-mcp/src/index-auto.ts, claude-logger-mcp/src/logger.ts, knowledge-management/normalize-specstory-filenames.sh. Benefits: No manual log cleanup, automatic cross-project knowledge capture, supports coding project as central knowledge hub.\" --significance 8)",
      "Bash(/Users/q284340/Agentic/coding/knowledge-management/ukb --interactive)",
      "Bash(claude-mcp)",
      "Bash(node:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}